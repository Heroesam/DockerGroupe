services:
    waf-gateway:
        image: owasp/modsecurity-crs:nginx
        container_name: waf-gateway
        restart: unless-stopped
        ports:
            - "80:8080"     # HTTP exposé sur le port 80, redirigé vers 8080 dans le container
            - "443:8443"    # HTTPS exposé sur le port 443, redirigé vers 8443 dans le container
        environment:
            - BACKEND=http://n8n:5678               # Ton backend en HTTP
            #            - SERVER_NAME=mon-domaine.tld   # domaine
            - BLOCKING_PARANOIA=2
            #            - BLOCKING_INBOUND_ANOMALY_SCORE=10
            - MODSEC_AUDIT_ENGINE=on                 # Activation audit logs
            - SSL_CERT=/etc/nginx/certs/server.crt  # Certificat SSL
            - SSL_CERT_KEY=/etc/nginx/certs/server.key
            - NGINX_ALWAYS_TLS_REDIRECT=on           # Redirige HTTP vers HTTPS
        networks:
            - backend
        volumes:
            - ./config/waf/certs:/etc/nginx/certs:r
            - ./config/waf/modsecurity.d/owasp-crs/custom_rules:/etc/modsecurity.d/custom_rules:ro

    n8n:
        image: n8nio/n8n:latest
        container_name: n8n
        environment:
            - DB_TYPE=postgresdb
            - DB_POSTGRESDB_HOST=n8n-db
            - DB_POSTGRESDB_PORT=5432
            - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
            - DB_POSTGRESDB_USER=${N8N_POSTGRES_USER}
            - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
            - N8N_BASIC_AUTH_ACTIVE=true
            - N8N_RUNNERS_ENABLED=true
            - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
            - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
            - N8N_HOST=${N8N_HOST}
            - N8N_PORT=${N8N_PORT}
            - N8N_PROTOCOL=http
            - N8N_SECURE_COOKIE=false  # A enlever quand HTTPS sera actif, voir avec Malo
        ports:
            - "5678:5678"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)"
            - "traefik.http.routers.n8n.entrypoints=web"
            - "traefik.http.services.n8n.loadbalancer.server.port=${N8N_PORT}"
        depends_on:
            - n8n-db
        networks:
            - backend
        restart: unless-stopped

    n8n-db:
        image: postgres:15
        container_name: n8n-db
        environment:
            POSTGRES_DB: ${N8N_POSTGRES_DB}
            POSTGRES_USER: ${N8N_POSTGRES_USER}
            POSTGRES_PASSWORD: ${N8N_POSTGRES_PASSWORD}
        volumes:
            - n8n_db_data:/var/lib/postgresql/data
        networks:
            - backend

    redis:
        image: redis:alpine
        container_name: n8n-redis
        networks:
            - backend

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
        container_name: elasticsearch
        environment:
            - node.name=elasticsearch
            - cluster.name=elk-cluster
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - xpack.security.enabled=false
            - xpack.security.transport.ssl.enabled=false
            - ES_JAVA_OPTS=-Xms1g -Xmx1g
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - es-data:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
        networks:
            - elk-net

    logstash:
        image: docker.elastic.co/logstash/logstash:8.13.4
        container_name: logstash
        volumes:
            - ./config/SIEM/logstash/pipeline:/usr/share/logstash/pipeline
        ports:
            - "5044:5044"     # Beats
            - "5000:5000/tcp" # TCP input
            - "5000:5000/udp" # UDP input
        depends_on:
            - elasticsearch
        networks:
            - elk-net

    kibana:
        image: docker.elastic.co/kibana/kibana:8.13.4
        container_name: kibana
        depends_on:
            - elasticsearch
        ports:
            - "5601:5601"
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        networks:
            - elk-net

    prometheus:
        image: prom/prometheus
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./prometheus/data:/prometheus
        ports:
            - "9090:9090"
        networks:
            - backend

    grafana:
        image: grafana/grafana
        ports:
            - "3000:3000"
        networks:
            - backend
        volumes:
            - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
            - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
            - ./grafana/dashboards:/var/lib/grafana/dashboards
            - grafana_data:/var/lib/grafana

volumes:
    n8n_db_data:
    es-data:
    grafana_data:

networks:
    backend:
    elk-net:
